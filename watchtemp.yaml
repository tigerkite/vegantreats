AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # API Gateway
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApi

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref ApiGatewayRestApi
      MethodSettings:
        - LoggingLevel: INFO
          DataTraceEnabled: true
          ResourcePath: "/*"
          HttpMethod: "*"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: 'requestId=$context.requestId, ip=$context.identity.sourceIp, caller=$context.identity.caller, requestTime=$context.requestTime, method=$context.httpMethod, path=$context.resourcePath, status=$context.status, protocol=$context.protocol, responseLength=$context.responseLength, userAgent=$context.identity.userAgent'

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${ApiGatewayRestApi}"

  ApiGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ApiGatewayExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: ApiGatewayLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function and Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchGoogleMapsAPIKey
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: vegantreats
        S3Key: FetchGoogleMapsAPIKey-122b2952-d3ff-459d-b048-bc084171b35a.zip
      Runtime: nodejs18.x

  # CloudFront Distribution and Logging
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "OAI for CloudFront distribution accessing vegantreats bucket"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: "vegantreats.s3.amazonaws.com"
            Id: vegantreatsS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        Enabled: true
        Logging:
          Bucket: !Sub "${LoggingBucket}.s3.amazonaws.com"
          Prefix: "cloudfront-logs/"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: vegantreatsS3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Headers:
              - Origin
              - Access-Control-Request-Method
              - Access-Control-Request-Headers
          MinTTL: 0
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  LoggingBucket:
    Type: AWS::S3::Bucket

  # CloudTrail for IAM and Secrets Manager Logging
  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/cloudtrail/${AWS::StackName}"

  CloudTrailRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudTrailRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CloudTrailLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: MyTrail
      S3BucketName: !Ref CloudTrailS3Bucket
      IsLogging: true
      CloudWatchLogsLogGroupArn: !GetAtt CloudTrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailRole.Arn

  CloudTrailS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-cloudtrail-logs"

Outputs:
  ApiGatewayRestApiId:
    Value: !Ref ApiGatewayRestApi
    Description: "API Gateway REST API ID"

  LambdaFunctionArn:
    Value: !GetAtt MyLambdaFunction.Arn
    Description: "Lambda function ARN"

  CloudFrontDistributionId:
    Value: !Ref CloudFrontDistribution
    Description: "CloudFront Distribution ID"

  CloudTrailLogGroupName:
    Value: !Ref CloudTrailLogGroup
    Description: "CloudTrail Log Group for IAM and Secrets Manager events"
